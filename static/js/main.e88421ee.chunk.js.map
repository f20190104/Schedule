{"version":3,"sources":["Components/Schedule.js","App.js","reportWebVitals.js","index.js"],"names":["Schedule","props","state","isModalOpen","title","date","startTime","endTime","participants","data","toggleModal","bind","submitForm","this","setState","console","log","JSON","stringify","render","query_schedule","gql","POST","Navbar","color","light","NavbarBrand","href","Container","style","marginTop","Modal","isOpen","toggle","ModalHeader","ModalBody","Form","FormGroup","Label","Input","type","value","placeholder","onChange","event","target","Row","Col","md","parseInt","mutation","variables","postmutation","Button","onClick","display","flexDirection","marginBottom","query","loading","error","schedules","schedule_schedule","ListGroup","map","item","ListGroupItem","Card","backgroundColor","alignContent","justifyContent","CardTitle","fontSize","marginLeft","textAlign","Component","App","link","createHttpLink","uri","client","ApolloClient","cache","InMemoryCache","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e88421ee.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Navbar, NavbarBrand, ListGroup, ListGroupItem, Container, Row, Col, Card, CardTitle, Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input} from 'reactstrap';\r\nimport {Mutation, Query} from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\n\r\nclass Schedule extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            isModalOpen : false,\r\n            title: \"\",\r\n            date: \"\",\r\n            startTime: \"\",\r\n            endTime:\"\",\r\n            participants: \"\",\r\n            data: []\r\n        }\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.submitForm = this.submitForm.bind(this);\r\n    }\r\n    toggleModal(){\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n    submitForm(){\r\n        const data = {\r\n            title: this.state.title,\r\n            date: this.state.date,\r\n            startTime: this.state.startTime,\r\n            endTime: this.state.endTime,\r\n            participants: this.state.participants\r\n        };\r\n        console.log(JSON.stringify(data));\r\n        this.setState({\r\n            isModalOpen : false,\r\n            title: \"\",\r\n            date: \"\",\r\n            startTime: \"\",\r\n            endTime:\"\",\r\n            participants: \"\"\r\n        });\r\n    this.render();\r\n    }\r\n    render(){\r\n        const query_schedule = gql`\r\n        {\r\n            schedule_schedule {\r\n                title\r\n                endTime\r\n                startTime\r\n                date\r\n                participants\r\n            }\r\n        }`;\r\n        const POST = gql`\r\n        mutation insert_schedule_schedules_one($title:String!, $date: String!, $startTime: String!, $endTime:String!,$participants:Int!){\r\n            insert_schedule_schedule_one(object: {title:$title, date: $date, startTime: $startTime, endTime:$endTime, participants:$participants}){\r\n                title\r\n            }\r\n        }`\r\n        return(<div>\r\n           <Navbar color=\"light\" light>\r\n               <NavbarBrand href=\"/\">Schedules</NavbarBrand>\r\n           </Navbar>\r\n            <Container style={{marginTop: 20}}>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader>Schedule a New Meeting</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form>\r\n                            <FormGroup>\r\n                                <Label>Title</Label>\r\n                                <Input type=\"text\" value={this.state.title} \r\n                                placeholder=\"Enter the title of your meeting\" \r\n                                onChange={(event)=>{this.setState({title:event.target.value})}}></Input>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Date</Label>\r\n                                <Input type=\"date\" value={this.state.date} \r\n                                placeholder=\"Enter the date of your meeting\" \r\n                                onChange={(event)=>{this.setState({date:event.target.value});}}></Input>\r\n                            </FormGroup>\r\n                            <Row>\r\n                                <Col md={6}>\r\n                                    <FormGroup>\r\n                                        <Label>Start Time</Label>\r\n                                        <Input type=\"time\" value={this.state.startTime}  \r\n                                        onChange={(event)=>{this.setState({startTime:event.target.value});}}></Input>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    <FormGroup>\r\n                                        <Label>End Time</Label>\r\n                                        <Input type=\"time\" value={this.state.endTime}  \r\n                                        onChange={(event)=>{this.setState({endTime:event.target.value});}}></Input>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            <FormGroup>\r\n                                <Label>Number of Participants</Label>\r\n                                <Input type=\"number\" value={this.state.participants} \r\n                                placeholder=\"Enter the number of participants of the meeting\" \r\n                                onChange={(event)=>{this.setState({participants: parseInt(event.target.value,10)});}}></Input>\r\n                            </FormGroup>\r\n                            <Mutation mutation={POST} variables={{title: this.state.title,startTime: this.state.startTime, endTime: this.state.endTime, date:this.state.date, participants:this.state.participants}}>\r\n                            {postmutation=><Button onClick={()=>{postmutation();this.submitForm();}}>Submit</Button>}\r\n                            </Mutation>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n                \r\n                <div style={{display:\"flex\", flexDirection:\"row-reverse\", marginBottom: 10}}>\r\n                    <Button onClick={this.toggleModal}>Schedule New Meeting</Button>\r\n                </div>\r\n                <Query query={query_schedule}>\r\n                        {({loading,error,data})=>{\r\n                            if (loading) return <div>Loading</div>\r\n                            if (error) return <div>Error</div>\r\n                           const schedules = data.schedule_schedule;\r\n                           return(<ListGroup>\r\n                            {schedules.map((item)=>{return (\r\n                            <ListGroupItem>\r\n                                <Row>\r\n                                    <Col md ={4}>\r\n                                        <Card style={{backgroundColor:\"#FDC05D\", display:'flex', alignContent:'center', justifyContent:'center'}}>\r\n                                            <CardTitle style={{fontSize: \"150%\", marginLeft: 10, textAlign:'center'}}>{item.title}</CardTitle>\r\n                                        </Card>\r\n                                    </Col>\r\n                                    <Col md={8}>\r\n                                        <Row>\r\n                                            <Col md={4}>Date : {item.date}</Col>\r\n                                            <Col md={4}>Time: {item.startTime} to {item.endTime}</Col>\r\n                                            <Col md={4}> Participants: {item.participants}</Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroupItem>\r\n                            );\r\n                            })}\r\n                        </ListGroup>);\r\n                        }}\r\n                </Query>\r\n                <Row>\r\n                    <Col md={8}>\r\n\r\n                    </Col>\r\n                    <Col md={4}>\r\n                        Note: You may have to refresh the webpage to be able to see newly created schedules\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Schedule;","import Schedule from './Components/Schedule';\nimport {ApolloClient} from 'apollo-client';\nimport {ApolloProvider} from 'react-apollo';\nimport {createHttpLink } from 'apollo-link-http';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\n\nfunction App() {\n  const link = createHttpLink({\n    uri: \"https://schedule.hasura.app/v1/graphql\"\n  });\n  const client = new ApolloClient({\n    link: link,\n    cache: new InMemoryCache()\n  });\n  return (\n    <ApolloProvider client={client}>\n      <Schedule/>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}